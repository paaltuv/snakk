// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Snakk.DB;

namespace Snakk.DB.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("Snakk.DB.AccessGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccessGroup");
                });

            modelBuilder.Entity("Snakk.DB.Avatar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Avatar");
                });

            modelBuilder.Entity("Snakk.DB.Ban", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FromUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsShadow")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ToUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ban");
                });

            modelBuilder.Entity("Snakk.DB.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowAgeConfirmation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowAllModerators")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowAnonymous")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SortWeight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Channel");
                });

            modelBuilder.Entity("Snakk.DB.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Snakk.DB.LastView", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastViewUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LastView");
                });

            modelBuilder.Entity("Snakk.DB.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Snakk.DB.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSafeForKids")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Snakk.DB.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReportTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Snakk.DB.Rule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Rule");
                });

            modelBuilder.Entity("Snakk.DB.Signature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Signature");
                });

            modelBuilder.Entity("Snakk.DB.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FromUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ToUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("Snakk.DB.SubscriptionNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionNotification");
                });

            modelBuilder.Entity("Snakk.DB.Survey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("Snakk.DB.SurveyQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SurveyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SurveyQuestionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestion");
                });

            modelBuilder.Entity("Snakk.DB.SurveyQuestionAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SurveyQuestionOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionOptionId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyQuestionAnswer");
                });

            modelBuilder.Entity("Snakk.DB.SurveyQuestionOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SurveyQuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("SurveyQuestionOption");
                });

            modelBuilder.Entity("Snakk.DB.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SortWeight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Snakk.DB.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("EncryptedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Snakk.DB.UserSocialLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalSiteUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SocialLinkTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSocialLink");
                });

            modelBuilder.Entity("Snakk.DB.Vote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CommentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("Snakk.DB.ChannelAccessGroup", b =>
                {
                    b.HasBaseType("Snakk.DB.AccessGroup");

                    b.Property<long?>("AccessGroupId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("AccessGroupId");

                    b.ToTable("ChannelAccessGroup");
                });

            modelBuilder.Entity("Snakk.DB.UserAccessGroup", b =>
                {
                    b.HasBaseType("Snakk.DB.AccessGroup");

                    b.Property<long?>("AccessGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("AccessGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAccessGroup");
                });

            modelBuilder.Entity("Snakk.DB.ChannelAvatar", b =>
                {
                    b.HasBaseType("Snakk.DB.Avatar");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelAvatar");
                });

            modelBuilder.Entity("Snakk.DB.UserAvatar", b =>
                {
                    b.HasBaseType("Snakk.DB.Avatar");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("UserId");

                    b.ToTable("UserAvatar");
                });

            modelBuilder.Entity("Snakk.DB.ChannelBan", b =>
                {
                    b.HasBaseType("Snakk.DB.Ban");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("ChannelBan");
                });

            modelBuilder.Entity("Snakk.DB.PostBan", b =>
                {
                    b.HasBaseType("Snakk.DB.Ban");

                    b.Property<long?>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostBan");
                });

            modelBuilder.Entity("Snakk.DB.UserBan", b =>
                {
                    b.HasBaseType("Snakk.DB.Ban");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("UserId");

                    b.ToTable("UserBan");
                });

            modelBuilder.Entity("Snakk.DB.PostComment", b =>
                {
                    b.HasBaseType("Snakk.DB.Comment");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWarning")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostComment");
                });

            modelBuilder.Entity("Snakk.DB.ReportComment", b =>
                {
                    b.HasBaseType("Snakk.DB.Comment");

                    b.Property<long?>("ReportId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("ReportComment");
                });

            modelBuilder.Entity("Snakk.DB.ChannelLastView", b =>
                {
                    b.HasBaseType("Snakk.DB.LastView");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("ChannelLastView");
                });

            modelBuilder.Entity("Snakk.DB.PostLastView", b =>
                {
                    b.HasBaseType("Snakk.DB.LastView");

                    b.Property<long?>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLastView");
                });

            modelBuilder.Entity("Snakk.DB.AdministratorPermission", b =>
                {
                    b.HasBaseType("Snakk.DB.Permission");

                    b.Property<int>("AdministratorPermissionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("UserId");

                    b.ToTable("AdministratorPermission");
                });

            modelBuilder.Entity("Snakk.DB.ChannelModeratorPermission", b =>
                {
                    b.HasBaseType("Snakk.DB.Permission");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChannelModeratorPermissionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("ChannelModeratorPermission");
                });

            modelBuilder.Entity("Snakk.DB.ChannelReport", b =>
                {
                    b.HasBaseType("Snakk.DB.Report");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("ChannelReport");
                });

            modelBuilder.Entity("Snakk.DB.CommentReport", b =>
                {
                    b.HasBaseType("Snakk.DB.Report");

                    b.Property<long?>("CommentId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentReport");
                });

            modelBuilder.Entity("Snakk.DB.PostReport", b =>
                {
                    b.HasBaseType("Snakk.DB.Report");

                    b.Property<long?>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReport");
                });

            modelBuilder.Entity("Snakk.DB.UserReport", b =>
                {
                    b.HasBaseType("Snakk.DB.Report");

                    b.Property<long>("ReportedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ReportedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserReport");
                });

            modelBuilder.Entity("Snakk.DB.ChannelRule", b =>
                {
                    b.HasBaseType("Snakk.DB.Rule");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelRule");
                });

            modelBuilder.Entity("Snakk.DB.UserSignature", b =>
                {
                    b.HasBaseType("Snakk.DB.Signature");

                    b.ToTable("UserSignature");
                });

            modelBuilder.Entity("Snakk.DB.ChannelSubscription", b =>
                {
                    b.HasBaseType("Snakk.DB.Subscription");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("ChannelSubscription");
                });

            modelBuilder.Entity("Snakk.DB.PostSubscription", b =>
                {
                    b.HasBaseType("Snakk.DB.Subscription");

                    b.Property<long?>("PostId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("PostId");

                    b.ToTable("PostSubscription");
                });

            modelBuilder.Entity("Snakk.DB.UserSubscription", b =>
                {
                    b.HasBaseType("Snakk.DB.Subscription");

                    b.Property<long>("SubscribeToUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SubscribeToUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscription");
                });

            modelBuilder.Entity("Snakk.DB.PostSurvey", b =>
                {
                    b.HasBaseType("Snakk.DB.Survey");

                    b.Property<long?>("PostId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("PostId");

                    b.ToTable("PostSurvey");
                });

            modelBuilder.Entity("Snakk.DB.ChannelTag", b =>
                {
                    b.HasBaseType("Snakk.DB.Tag");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelTag");
                });

            modelBuilder.Entity("Snakk.DB.CommentVote", b =>
                {
                    b.HasBaseType("Snakk.DB.Vote");

                    b.ToTable("CommentVote");
                });

            modelBuilder.Entity("Snakk.DB.Post", b =>
                {
                    b.HasOne("Snakk.DB.Channel", null)
                        .WithMany("Posts")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("Posts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.SubscriptionNotification", b =>
                {
                    b.HasOne("Snakk.DB.Subscription", null)
                        .WithMany("Notifications")
                        .HasForeignKey("SubscriptionId");
                });

            modelBuilder.Entity("Snakk.DB.SurveyQuestion", b =>
                {
                    b.HasOne("Snakk.DB.Survey", null)
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("Snakk.DB.SurveyQuestionAnswer", b =>
                {
                    b.HasOne("Snakk.DB.SurveyQuestionOption", null)
                        .WithMany("Answers")
                        .HasForeignKey("SurveyQuestionOptionId");

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("SurveyQuestionAnswers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.SurveyQuestionOption", b =>
                {
                    b.HasOne("Snakk.DB.SurveyQuestion", null)
                        .WithMany("Options")
                        .HasForeignKey("SurveyQuestionId");
                });

            modelBuilder.Entity("Snakk.DB.UserSocialLink", b =>
                {
                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("SocialLinks")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.Vote", b =>
                {
                    b.HasOne("Snakk.DB.Comment", null)
                        .WithMany("Votes")
                        .HasForeignKey("CommentId");

                    b.HasOne("Snakk.DB.User", "User")
                        .WithMany("GivenVotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Snakk.DB.ChannelAccessGroup", b =>
                {
                    b.HasOne("Snakk.DB.AccessGroup", null)
                        .WithMany("ChannelAccessGroups")
                        .HasForeignKey("AccessGroupId");

                    b.HasOne("Snakk.DB.AccessGroup", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.ChannelAccessGroup", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Snakk.DB.UserAccessGroup", b =>
                {
                    b.HasOne("Snakk.DB.AccessGroup", null)
                        .WithMany("UserAccessGroups")
                        .HasForeignKey("AccessGroupId");

                    b.HasOne("Snakk.DB.AccessGroup", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.UserAccessGroup", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("AccessGroups")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.ChannelAvatar", b =>
                {
                    b.HasOne("Snakk.DB.Channel", null)
                        .WithMany("Avatars")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Snakk.DB.Avatar", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.ChannelAvatar", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Snakk.DB.UserAvatar", b =>
                {
                    b.HasOne("Snakk.DB.Avatar", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.UserAvatar", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("Avatars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.ChannelBan", b =>
                {
                    b.HasOne("Snakk.DB.Channel", null)
                        .WithMany("Bans")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Snakk.DB.Ban", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.ChannelBan", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("ChannelBans")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.PostBan", b =>
                {
                    b.HasOne("Snakk.DB.Ban", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.PostBan", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.Post", null)
                        .WithMany("Bans")
                        .HasForeignKey("PostId");

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("PostBans")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.UserBan", b =>
                {
                    b.HasOne("Snakk.DB.Ban", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.UserBan", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("Bans")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.PostComment", b =>
                {
                    b.HasOne("Snakk.DB.Comment", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.PostComment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("PostComments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.ReportComment", b =>
                {
                    b.HasOne("Snakk.DB.Comment", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.ReportComment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.Report", null)
                        .WithMany("Comments")
                        .HasForeignKey("ReportId");

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("ReportComments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.ChannelLastView", b =>
                {
                    b.HasOne("Snakk.DB.Channel", null)
                        .WithMany("LastViews")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Snakk.DB.LastView", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.ChannelLastView", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("ChannelLastViews")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.PostLastView", b =>
                {
                    b.HasOne("Snakk.DB.LastView", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.PostLastView", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.Post", null)
                        .WithMany("LastViews")
                        .HasForeignKey("PostId");

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("PostLastViews")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.AdministratorPermission", b =>
                {
                    b.HasOne("Snakk.DB.Permission", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.AdministratorPermission", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("AdministratorPermissions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.ChannelModeratorPermission", b =>
                {
                    b.HasOne("Snakk.DB.Channel", null)
                        .WithMany("ModeratorPermissions")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Snakk.DB.Permission", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.ChannelModeratorPermission", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("ModeratorPermissions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.ChannelReport", b =>
                {
                    b.HasOne("Snakk.DB.Channel", null)
                        .WithMany("Reports")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Snakk.DB.Report", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.ChannelReport", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("ChannelReports")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.CommentReport", b =>
                {
                    b.HasOne("Snakk.DB.Comment", null)
                        .WithMany("Reports")
                        .HasForeignKey("CommentId");

                    b.HasOne("Snakk.DB.Report", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.CommentReport", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("CommentReports")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.PostReport", b =>
                {
                    b.HasOne("Snakk.DB.Report", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.PostReport", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.Post", null)
                        .WithMany("Reports")
                        .HasForeignKey("PostId");

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("PostReports")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.UserReport", b =>
                {
                    b.HasOne("Snakk.DB.Report", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.UserReport", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.User", "ReportedUser")
                        .WithMany("OtherUsersReportsOfThisUser")
                        .HasForeignKey("ReportedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.User", "User")
                        .WithMany("UserReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Snakk.DB.ChannelRule", b =>
                {
                    b.HasOne("Snakk.DB.Channel", null)
                        .WithMany("Rules")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Snakk.DB.Rule", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.ChannelRule", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Snakk.DB.UserSignature", b =>
                {
                    b.HasOne("Snakk.DB.Signature", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.UserSignature", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Snakk.DB.ChannelSubscription", b =>
                {
                    b.HasOne("Snakk.DB.Channel", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Snakk.DB.Subscription", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.ChannelSubscription", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("ChannelSubscriptions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Snakk.DB.PostSubscription", b =>
                {
                    b.HasOne("Snakk.DB.Subscription", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.PostSubscription", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.Post", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Snakk.DB.UserSubscription", b =>
                {
                    b.HasOne("Snakk.DB.Subscription", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.UserSubscription", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.User", "SubscribeToUser")
                        .WithMany("OtherUsersSubscriedToThisUser")
                        .HasForeignKey("SubscribeToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.User", null)
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId");

                    b.Navigation("SubscribeToUser");
                });

            modelBuilder.Entity("Snakk.DB.PostSurvey", b =>
                {
                    b.HasOne("Snakk.DB.Survey", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.PostSurvey", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snakk.DB.Post", null)
                        .WithMany("Surveys")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Snakk.DB.ChannelTag", b =>
                {
                    b.HasOne("Snakk.DB.Channel", null)
                        .WithMany("Tags")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Snakk.DB.Tag", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.ChannelTag", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Snakk.DB.CommentVote", b =>
                {
                    b.HasOne("Snakk.DB.Vote", null)
                        .WithOne()
                        .HasForeignKey("Snakk.DB.CommentVote", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Snakk.DB.AccessGroup", b =>
                {
                    b.Navigation("ChannelAccessGroups");

                    b.Navigation("UserAccessGroups");
                });

            modelBuilder.Entity("Snakk.DB.Channel", b =>
                {
                    b.Navigation("Avatars");

                    b.Navigation("Bans");

                    b.Navigation("LastViews");

                    b.Navigation("ModeratorPermissions");

                    b.Navigation("Posts");

                    b.Navigation("Reports");

                    b.Navigation("Rules");

                    b.Navigation("Subscriptions");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Snakk.DB.Comment", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Snakk.DB.Post", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("Comments");

                    b.Navigation("LastViews");

                    b.Navigation("Reports");

                    b.Navigation("Subscriptions");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("Snakk.DB.Report", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Snakk.DB.Subscription", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Snakk.DB.Survey", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Snakk.DB.SurveyQuestion", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Snakk.DB.SurveyQuestionOption", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Snakk.DB.User", b =>
                {
                    b.Navigation("AccessGroups");

                    b.Navigation("AdministratorPermissions");

                    b.Navigation("Avatars");

                    b.Navigation("Bans");

                    b.Navigation("ChannelBans");

                    b.Navigation("ChannelLastViews");

                    b.Navigation("ChannelReports");

                    b.Navigation("ChannelSubscriptions");

                    b.Navigation("CommentReports");

                    b.Navigation("GivenVotes");

                    b.Navigation("ModeratorPermissions");

                    b.Navigation("OtherUsersReportsOfThisUser");

                    b.Navigation("OtherUsersSubscriedToThisUser");

                    b.Navigation("PostBans");

                    b.Navigation("PostComments");

                    b.Navigation("PostLastViews");

                    b.Navigation("PostReports");

                    b.Navigation("Posts");

                    b.Navigation("ReportComments");

                    b.Navigation("SocialLinks");

                    b.Navigation("SurveyQuestionAnswers");

                    b.Navigation("UserReports");

                    b.Navigation("UserSubscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
